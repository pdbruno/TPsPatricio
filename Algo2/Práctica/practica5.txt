practica 5
ejercicio 1- quizas heapsort se vea un poco benecifiado ya que al hacer floyd para armar el max-heap, como el arreglo esta ordenado de 
mayor a menor, es un max heap, y el algoritmo de floyd nunca va a hacer ningun sift down.

ejercicio 2- utilizaria insertion sort, porque hasta que termine s´ seria tiempo lineal

Ejercicio 3
Escribir un algoritmo que encuentre los k elementos m´as chicos de un arreglo de dimensi´on n, donde k ≤ n.
¿Cu´al es su complejidad temporal? ¿A partir de qu´e valor de k es ventajoso ordenar el arreglo entero primero?

puedo hacer un selection sort k veces (creo que es O(k*n))
o puedo hacer floyd en O(n), se convierte en un heap y desencolo los primeros k O(n + k*log(n))

Ejercicio 4
Se tiene un conjunto de n secuencias {s1, s2, . . . , sn} en donde cada si (1 ≤ i ≤ n) es una secuencia ordenada
de naturales. ¿Qu´e m´etodo utilizar´ıa para obtener un arreglo que contenga todos los elementos de la uni´on de
los si ordenados. Describirlo. Justificar

merge(conj: conj(sec)){ //O(longitudTotal * #conj)
    lista(itLista) listaIts = Vacia()
    itConj = CrearIt(conj)
    longitudTotal = 0
    while(HaySiguiente(itConj)){
        secu = Siguiente(itConj)
        longitudTotal += Longitud(secu)
        AgregarAdelante(listaIts, CrearIt(secu))
        Avanzar(itConj)
    }
    arreglo(nat) res = arreglo[longitudTotal] //no me acuerdo la sintaxis
    i=0
    while(Longitud(listaIts) > 0){
    
        itLista(ItLista(nat)) ElIteradorLoco = CrearIt(listaIts)

        itLista(ItLista(nat)) itMinimo = CrearIt(listaIts)

        while(HaySiguiente(ElIteradorLoco)){
            it = Siguiente(ElIteradorLoco)

            if(Siguiente(it) < Siguiente(Siguiente(itMinimo))){
                itMinimo = ElIteradorLoco //(por copia qcy)
            }

            Avanzar(ElIteradorLoco)
        }

        res[i] = Siguiente(Siguiente(itMinimo))
        Avanzar(Siguiente(itMinimo))
        if(!HaySiguiente(Siguiente(itMinimo))){
            EliminarSiguiente(itMinimo)
        }
        i++
    }
}

Ejercicio 6
- en una sola iteracion identifico todas las escaleras y guardo un par <inicio, fin> en buckets segun la longitud O(n)
- no hace falta ordenar cada bucket porque ya estan ordenados en forma creciente por por el primer valor de la escalera
- hago un arreglo res O(n)
- voy concatenando las escaleras de los buckets, empezando desde el ultimo bucket y terminando en el primero
como la escalera mas larga es de n elementos, van a haber n buckets (entonces el ciclo que recorre buckets hace n iteraciones)
dentro de cada iteracion concateno las escaleras que hay en el bucket. No obstante, sin importar cuantas escaleras o elementos hay en cada bucket, 
al resultado final le voy a concatenar n elementos, entonces son O(n) operaciones "afuera" y O(n) operaciones en total "adentro", 
en total O(2n) = O(n)

Ejercicio 7
- recorro la lista de n elementos (O(n)) y cada uno lo agrego al arbol (O(log n))
en realidad inserto tuplas <elemento, cant> y si el elemento ya existe sumo 1 a cant
le digo al arbol que vaya al elemento de mas a la izquierda, me diga el valor (para agregarlo a res) y lo elimine (si cant es 0, sino resto 1)

Ejercicio 8
no me sale

Ejercicio 10
a)
algortimoCoso(A){
    for(i = 1; i < A.length; i *= 2){
        casiSort(A, i, A.length);
    }
    //no se me ocurre una forma eficiente de terminar de ordenar la secuencia
    //podria hacer insertion sort empezando desde la mitad pero mmmalardo
}
b) kflhbrtgjahrs qcy
c) 
Ejercicio 15
el return es <tieneAgujero, min, max>
tieneAgujero(A, inicio, fin){
    if(inicio + 1 = fin){
        return <false, A[inicio], A[inicio]>
    } else {
        med = ...
        tieneAgujeroIzq, minIzq, maxIzq = tieneAgujero(A, inicio, med)
        tieneAgujeroDer, minDer, maxDer = tieneAgujero(A, med, fin)
        min = min(minIzq, minDer)
        max = max(maxIzq, maxDer)
        rangoCorrecto = max - min <= fin - inicio
        return <!rangoCorrecto || tieneAgujeroDer || tieneAgujeroIzq, min, max>
    }
}

ejercicios pendientes
Ejercicio 8
2. Suponiendo que todos los elementos de B se encuentran en A, escriba un algoritmo para obtener C que
tenga complejidad temporal O(n + n'(log(n') + m)) en el peor caso y que utilice solamente arreglos como
estructuras auxiliares. Justifique la complejidad de su algoritmo.

coso(A, B){
    recorro A y armo un arreglo aux con tuplas <elem, rep> (O(n))
    recorro B, y por cada elemento busco su aparicion en aux y sumo 1 a rep (O(n' * m))
    recorro aux y expando cada tupla rep veces (O(m + n))
}

Ejercicio 10
Suponer que se tiene un hipot´etico algoritmo de “casi” ordenamiento casiSort que dado un arreglo A de
n elementos, ordena n/2 elementos arbitrarios coloc´andolos en la mitad izquierda del arreglo A[1 . . . n/2]. Los
elementos no ordenados de A se colocan en la mitad derecha A[n/2 + 1 . . . n].
1. Describir un algoritmo de ordenamiento para arreglos de n elementos (con n potencia de 2) utilizando el
algoritmo casiSort.
2. Obtener la complejidad temporal en el peor caso del algoritmo dado en el punto anterior, suponiendo que
casiSort tiene complejidad temporal Θ(n).
3. Cree que es posible dise˜nar un algoritmo para casiSort que realice O(n) comparaciones en el peor caso?
Justifique su respuesta.

sort(A){
    for(i=1; 1 < tam(A); i *= 2){ // O(nlogn)
        casiSort(A, i, tam(A))
    }
    return recursiveAux(A, 1, tam(A)) // O(n)
}
recursiveAux(A, inicio, fin){
    if(inicio + 1 = fin){
        return [A[inicio]]
    } else {
        med = (inicio + fin)/2
        der = recursiveAux(A, med, fin)
        return customMerge(A, inicio, med, der) //se entiende
    }
}

3. me encantaria saber (algo me dice que no)

Ejercicio 16
Se tiene un arreglo A de n n´umeros naturales. Sea m := m´ax{A[i] : 1 ≤ i ≤ n} el m´aximo del arreglo. Se
desea dar un algoritmo que ordene el arreglo en O(n log m), utilizando ´unicamente arreglos y variables ordinarias
(i.e., sin utilizar listas enlazadas, ´arboles u otras estructuras con punteros).
a) Implementar la funci´on
raroSort(in A: arreglo(nat)) → bool
que resuelve el problema planteado. La funci´on debe ser de tiempo O(n log m), d´onde n = tam(A) y
m = m´ax{A[i] : 1 ≤ i ≤ n}.
b) Calcular y justificar la complejidad del algoritmo propuesto.
c) Hay al menos 3 formas de resolver este ejercicio, pensar las que se puedan, discutir luego con los compa˜neros
las que encontraron ellos y si hace falta, consultar.

una solucion: el amigo radix sort
otra solucion: ? el profe dijo hacer un trie con los digitos pero no se puede usar un trie
pero si creo que puedo hacer un trie trucho usando solo arreglos y tuplas (creo)
